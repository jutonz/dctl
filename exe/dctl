#!/usr/bin/env ruby

require "dctl"
require "thor"
require "pty"
require "rainbow"
require "config"
require "open3"

module Dctl
  class Cli < Thor
    ERROR_COLOR = :red
    SUCCESS_COLOR = :green
    CMD_COLOR = :dimgray

    class_option :env, default: "dev", type: :string
    class_option :host, type: :string

    desc "build", "Build images. Pass image name to build a specific one; otherwise builds all"
    option :pull, type: :boolean, default: false
    option :cache_from, type: :string
    def build(*images)
      dctl   = Dctl::Main.new env: options[:env]
      images = dctl.expand_images *images
      env    = options[:env]

      puts "Generating build script for #{images.join(", ")}"
      commands = []


      images.each do |image|
        tag = dctl.image_tag(image)
        dockerfile = dctl.image_dockerfile(image)
        build_opts = %W(
          -f=#{dockerfile}
          -t=#{tag}
        )
        build_opts << "--pull=true" if options[:pull]
        if options[:cache_from]
          if images.size > 1
            error = "--cache-from is only supported when building a single " \
             "image (you specified #{images.size}: #{images.join(", ")})"
            puts Rainbow(error).fg ERROR_COLOR
            exit 1
          end
          build_opts << "--cache-from=#{options[:cache_from]}"
        end

        commands << "#{sudo}docker #{docker_opts} build #{build_opts.join(" ")} ."
      end

      stream_output commands.join(" && "), exec: true
    end

    desc "push", "Upload locally built images to the remote store"
    def push(*images)
      dctl   = Dctl::Main.new env: options[:env]
      images = dctl.expand_images *images
      push_cmds = []

      images.each do |image|
        tag = dctl.image_tag(image)
        push_cmds << "#{sudo}docker #{docker_opts} push #{tag}"
      end

      push_cmd = push_cmds.join " && "
      stream_output push_cmd, exec: true
    end

    desc "pull", "Pull the latest remote images to your local machine"
    def pull(*images)
      dctl   = Dctl::Main.new env: options[:env]
      images = dctl.expand_images *images
      pull_cmds = []

      images.each do |image|
        tag = dctl.image_tag(image)
        pull_cmds << "#{sudo}docker #{docker_opts} pull #{tag}"
      end

      pull_cmd = pull_cmds.join " && "
      stream_output pull_cmd, exec: true
    end

    desc "up", "Start your dockerized app server"
    def up
      dctl = Dctl::Main.new env: options[:env]

      pidfile = "tmp/pids/server.pid"
      FileUtils.rm pidfile if File.exist? pidfile

      compose_opts = %w(--remove-orphans)
      stream_output "#{sudo}docker-compose #{docker_opts} -f #{dctl.compose_file_path} up #{compose_opts.join(" ")}", exec: true
    end

    desc "down", "Stop one or many containers"
    def down(*images)
      dctl = Dctl::Main.new env: options[:env]
      stream_output "#{sudo}docker-compose #{docker_opts} -f #{dctl.compose_file_path} down #{images.join(" ")}", exec: true
    end

    desc "rm", "Remove one or many containers"
    option :force, type: :boolean, default: false, aliases: %w(f)
    def rm(*images)
      dctl = Dctl::Main.new env: options[:env]
      opts = " --force" if options[:force]
      stream_output "#{sudo}docker-compose #{docker_opts} -f #{dctl.compose_file_path} rm#{opts} #{images.join(" ")}", exec: true
    end

    desc "start", "Start one or many containers"
    def start(*images)
      dctl = Dctl::Main.new env: options[:env]
      stream_output "#{sudo}docker-compose #{docker_opts} -f #{dctl.compose_file_path} start #{images.join(" ")}", exec: true
    end

    desc "stop", "Stop one or many containers"
    def stop(*images)
      dctl = Dctl::Main.new env: options[:env]
      stream_output "#{sudo}docker-compose #{docker_opts} -f #{dctl.compose_file_path} stop #{images.join(" ")}", exec: true
    end

    desc "restart", "Restart one or many containers"
    def restart(*images)
      dctl = Dctl::Main.new env: options[:env]
      stream_output "#{sudo}docker-compose #{docker_opts} -f #{dctl.compose_file_path} restart #{images.join(" ")}", exec: true
    end

    desc "create", "Bring an image up without starting it"
    def create(*images)
      dctl = Dctl::Main.new env: options[:env]
      stream_output "#{sudo}docker-compose #{docker_opts} -f #{dctl.compose_file_path} up --no-start #{images.join(" ")}", exec: true
    end

    desc "run [IMAGE] [COMMAND]", "Run a command on the given image"
    def runcmd(image, *commands)
      dctl = Dctl::Main.new env: options[:env]
      stream_output "#{sudo}docker-compose #{docker_opts} -f #{dctl.compose_file_path} run #{image} #{commands.join(" ")}", exec: true
    end

    desc "exec [IMAGE] [COMMAND]", "Execute a command on the given _running_ image"
    map exec: :_exec # avoid overwriting Kernel#exec
    def _exec(image, *commands)
      dctl = Dctl::Main.new env: options[:env]
      stream_output "#{sudo}docker-compose #{docker_opts} -f #{dctl.compose_file_path} exec #{image} #{commands.join(" ")}", exec: true
    end

    desc "recreate", "Stop, remove, build, create, and start a container"
    option :build, type: :boolean, default: true, aliases: %w(b)
    def recreate(container)
      operations = ["stop", "rm -f", "build", "create", "start"]

      operations.delete("build") unless options[:build]

      commands = operations.map { |op| "dctl #{op} #{container}" }
      stream_output "#{commands.join(" && ")}", exec: true
    end

    desc "ps", "List running containers for this environment"
    def ps
      dctl = Dctl::Main.new env: options[:env]
      stream_output "#{sudo}docker-compose #{docker_opts} -f #{dctl.compose_file_path} ps", exec: true
    end

    desc "release IMAGE", "Increase the version number for the given image"
    def release(image)
      dctl = Dctl::Main.new env: options[:env]
      dctl.release(image)
    end

    desc "initdb", "Setup initial postgres database"
    def initdb
      dctl = Dctl::Main.new env: options[:env]
      env = options[:env]
      local_data_dir = File.expand_path "../tmp/psql-#{env}", __FILE__
      `#{sudo}rm -r #{local_data_dir}` if File.exists? local_data_dir # todo prompt

      cmd = "#{sudo}docker-compose #{docker_opts} -f #{dctl.compose_file_path} run --rm psql /bin/bash -c /etc/initdb.sh"

      stream_output cmd, exec: true
    end

    desc "cleanup", "cleans up dangling docker images"
    option :keep, type: :numeric, default: -1, desc: "How many old images to keep around, e.g. \"3\" will keep the current version plus the three next most recent. Use -1 to keep all."
    def cleanup
      to_remove = []
      to_remove += `#{sudo}docker images --filter dangling=true -q`.split("\n")

      if options[:keep] != -1
        keep_last = options[:keep]
        dctl = Dctl::Main.new env: options[:env]
        dctl.expand_images.each do |image|
          current_version = dctl.current_version_for_image(image).to_i
          keep_after_tag = current_version - keep_last

          next if keep_after_tag < 0

          cmd = "#{sudo}docker #{docker_opts} images #{dctl.image_tag(image, version: nil)} --filter before=#{dctl.image_tag(image, version: keep_after_tag)} -q"
          puts Rainbow(cmd).fg CMD_COLOR
          stdout, stderr, status = Open3.capture3(cmd)
          if status.success?
            to_remove += stdout.split("\n")
          elsif stderr.include? "No such image"
            # Specified before filter did not exist on current machine. Loop
            # through all old images to manually reconstruct.
            Array(0..keep_after_tag).each do |version|
              cmd = "#{sudo}docker images #{dctl.image_tag(image, version: version)} -q"
              puts Rainbow(cmd).fg CMD_COLOR
              image_id = `#{cmd}`.strip
              to_remove << image_id unless image_id.empty?
            end
          end
        end
      end

      if to_remove.none?
        puts Rainbow("No images to cleanup. Yay!").fg SUCCESS_COLOR
        exit 0
      end

      stream_output "#{sudo}docker rmi -f #{to_remove.join(" ")}", exec: true
    end

    desc "bash CONTAINER", "Create a new instance of the given image with a bash prompt"
    def bash(container = "app")
      dctl = Dctl::Main.new env: options[:env]
      cmd = "#{sudo}docker-compose #{docker_opts} -f #{dctl.compose_file_path} run --rm #{container} /bin/bash"

      stream_output cmd, exec: true
    end

    desc "connect CONTAINER", "Connect to a running container."
    def connect(image = "app")
      dctl = Dctl::Main.new env: options[:env]
      stream_output "#{sudo}docker-compose #{docker_opts} -f #{dctl.compose_file_path} exec #{image} /bin/bash", exec: true
    end

    desc "attach CONTAINER", "Connect to a running container."
    option :env, type: :string, default: "dev"
    def attach(image = "app")
      dctl = Dctl::Main.new env: options[:env]
      tag = dctl.image_tag(image)

      cmd = "#{sudo}docker #{docker_opts} ps --filter ancestor=#{image} -aq | head -n1"
      puts cmd
      container = `#{cmd}`.chomp

      if container.empty?
        puts Rainbow("No running containers for image #{image}").fg ERROR_COLOR
        exit 1
      end

      stream_output "#{sudo}docker attach #{container}", exec: true
    end

    desc "version", "Print version"
    def version
      puts Dctl::VERSION
    end

    desc "tag-for [IMAGE]", "Returns the full tag for the given image. Useful in CI."
    def tag_for(image)
      dctl = Dctl::Main.new env: options[:env]
      puts dctl.image_tag(image)
    end

    no_commands do
      def stream_output(string, print_command: true, exec: false)
        puts Rainbow(string).fg(CMD_COLOR) if print_command
        if exec
          exec string
        else
          PTY.spawn string do |stdout, stdin, pid|
            stdout.each { |line| puts line }
          end
        end
      end

      def sudo
        return false if !ENV["DCTL_NOSUDO"].nil?
        `uname`.chomp == "Darwin" ? "" : "sudo " # use sudo on linux hosts
      end

      def docker_opts
        opts = []

        # Respect both DOCKER_HOST and --host, but prefer --host if both are
        # present.
        host = options[:host]
        host ||= !ENV["DOCKER_HOST"].nil? ? ENV["DOCKER_HOST"] : nil
        opts << "--host #{host}" if host

        opts.join " "
      end
    end
  end
end

Dctl::Cli.start ARGV
